apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

// 将生成的jar复制到outputs目录方便查看
task makeJar(){
    delete{
        delete('build/outputs/pluginlibrary.jar')
    }
    copy {
        from('build/intermediates/aar_main_jar/debug/classes.jar')
        into('build/outputs/')
        rename('classes.jar','pluginlibrary.jar')
    }
}

// build之后生成plugin-library的jar
makeJar.dependsOn(build)

def rootPath = getRootDir().getPath()

task jarToPlugin(){
    copy {
        from('build/outputs/pluginlibrary.jar')
        into("$rootPath/plugin-class/lib")
        from('build/outputs/pluginlibrary.jar')
        into("$rootPath/plugin-res/lib")
    }
}
// 生成jar之后将其copy到plugin中的lib下面
jarToPlugin.dependsOn(makeJar)
